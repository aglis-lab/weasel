// This is how we import file
import "io"
import "parallel"

// HETEROGENEOUS PROGRAMMING Function
fun parallel get_global_id(const i int) ulong {} // Get Global ID

parallel kernel
fun Mul(data *float) {
    let global = parallel.global
    let threadCount = parallel.thread
    let threadIdx = parallel.threadIndex
    let blockCount = parallel.block
    let block = parallel.blockIndex

    let idx = threadCount * block + threadIdx
    if (idx > global) {
        return;
    }

    data[idx] = data[idx] ^ 2
}

// Main function like always
fun Main() {

    // Print Code
    // No ';' needed to end the statement
    print("Hello World")

    // We use keyword 'let', 'final', and 'const'
    // Stack Memory Declaration
    let car Car

    // Heap Memory Declaration
    let car2 = new Car()

    // Call Internal Function
    car.Move()

    // Call Function by Reference
    car2.Crash()

    // HETEROGENEOUS PROGRAMMING Function call //
    // The Language automaticly understand how to handle local or global data
    // We need to map data address into lookup gpu memory
    // We use already defined data in memory or use new one if not yet copy
    @parallel{
        global: 4000
        block: 32,
        thread: 128,
    }
    Mul(data)

    load(data)      // load data from device to host
    store(data)     // store data from host to device
    release(data)   // release the device memory
}

// We not support 'class' but struct
struct Car {
    // How we declare variable similar with go language but lower case for public variable
    distance int
    name []byte

    // we use '_' for private or protected variable
    _numCrash int

    // Struct Internal Funtion
    // public function definition
    fun Move() {
        // We use {$number} format
        carName()
        print("We have run about {}KM", distance)
    }

    // private or protected function definition
    fun carName() {
        print("Car name is {0}", name)
    }
}

// Function by reference
fun Car Crash() {
    // We use 'this' keyword to access 'Car' variable or function
    print("The Car {} was crashed after {}KM", this.name, this.distance)

    // Function by reference can access private or protected variable
    this._numCrash++
}
