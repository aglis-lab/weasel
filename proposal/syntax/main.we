package main

// This is how we import file
import fmt
import parallel
import examples::vehicle
import allocator

/*
Data Types

1 byte
char
byte
sbyte

2 bytes
short
ushort

4 bytes
int
uint
float

8 bytes
long
ulong
double

*/

parallel
fun Mul(data *float) {
    let global = parallel.global
    let threadCount = parallel.thread
    let threadIdx = parallel.threadIndex
    let blockCount = parallel.block
    let block = parallel.blockIndex

    let idx = threadCount * block + threadIdx
    if (idx > global) {
        return;
    }

    data[idx] = data[idx] ^ 2
}

// Main function like always
fun main() {
    // Print Code
    // No ';' needed to end the statement
    fmt::Println("Hello World")
    fmt::Println("Date {}", 9)
    fmt::Println("Year {1}", 2022)

    // We use keyword 'let', 'final', and 'const'
    // Stack Memory Declaration
    let car vehicle::Car

    // Heap Memory Definition
    let alloc = allocator::New()
    let car2 = alloc.New(vehicle::Car)

    // Call Internal Function
    car.Move()

    // Call Function by Reference
    car2.Crash()

    // Store data from host to device
    let dataGpu = parallel::Store(data)

    // HETEROGENEOUS PROGRAMMING Function call //
    // In V2 compiler or system will automaticly understand
    // To execute this function on device hardware accelerator

    // Global = 4000
    // Block = 32
    // Thread = 128
    Mul<<4000, 32, 128>>(dataGpu)

    // Load data from device to host
    parallel::Load(dataGpu, data)

    // Load data from device to host
    data = parallel::Load(dataGpu)

    // release the device memory
    // release(dataGpu)
    // GPU Memory should be release automaticly when no further references

    // Looping
    for true {
        // Do something
    }

    for ; ; {
        // Do something
    }

    switch car {
        case 1: // Do something
        default: // Do something
    }
}
