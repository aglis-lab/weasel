// Can't be used Symbol
// ! => miss understanding with not

// swift automaticly allocate class as arc or shared pointer
// zig use manual heap allocation

// The Question is, we use struct which always get a default value
// Why we need optional for struct
// The Answer is, that we want to assign nil into struct

// Is that mean the value of those optional value is a pointer?
// No, it is possible with optional struct or even with primitive types

// Reference Pointer
/////
// let &refCar = car

// Parameter Reference
/////
// fun testCar(car &Car)

// Unsafe Pointer and Strong point
// How if strong pointer inside optional?
// Strong pointer doesn't need optional, because it is never nil
/////
// let strongCar *Car

// Shared Pointer
// How if ref inside optional?
// Shared pointer doesn't need optional, because it is an optional wrap
/////
// let sharedCar ?*Car

// Weak Pointer
// Weak Pointer doesn't need optional
// How if there are inside generic type
/////
// let weak weakRef *Car

// Optional
// Optional is the best way to say if the value is invalid for stack memory
// For heap memory we already have smart pointer to do that for you
/////
// let an ?Car

struct Car {
    name string
    distance int = 12
}

fun Assign(car ?Car) {
    let giveme = Car{}  // stack allocation

    car = &giveme       // error because struct get destroyed after

    // stack allocation will be cleared after function return
}

fun main() {
    // Automatic Reference Counting
    let car ?Car
}
