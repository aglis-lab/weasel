// This is how we import file
import "io"
import "parallel"

// HETEROGENEOUS PROGRAMMING Function
fun parallel get_global_id(const i int) ulong {} // Get Global ID

// TODO: V2 -> We didn't need any extra keyword (parallel or kernel)
fun Mul(data *float) {
    let global = parallel.global
    let threadCount = parallel.thread
    let threadIdx = parallel.threadIndex
    let blockCount = parallel.block
    let block = parallel.blockIndex

    let idx = threadCount * block + threadIdx
    if (idx > global) {
        return;
    }

    data[idx] = data[idx] ^ 2
}

// Main function like always
fun Main() {

    // Print Code
    // No ';' needed to end the statement
    print("Hello World\n")
    print("Date {}\n", 9)
    print("Year {1}\n", 2022)

    // We use keyword 'let', 'final', and 'const'
    // Stack Memory Declaration
    let car Car

    // Heap Memory Definition
    let car2 = new Car

    // Call Internal Function
    car.Move()

    // Call Function by Reference
    car2.Crash()

    // store data from host to device
    let dataGpu = store(data)

    // HETEROGENEOUS PROGRAMMING Function call //
    // In V2 compiler or system will automaticly understand
    // To execute this function on device hardware accelerator

    // Global = 4000
    // Block = 32
    // Thread = 128
    Mul<<4000, 32, 128>>(dataGpu)

    // Load data from device to host
    load(dataGpu, data)

    // Load data from device to host
    data = load(dataGpu)

    // release the device memory
    // release(dataGpu)
    // GPU Memory should be release automaticly when no further references

    // Looping
    for true {
        // Do something
    }

    for ; ; {
        // Do something
    }

    switch car {
        case 1: // Do something
        default: // Do something
    }
}

// We not support 'class' but struct
struct Car {
    // How we declare variable similar with go language but lower case for public variable
    distance int
    name []byte

    // we use '_' for private or protected variable
    _numCrash int

    // Struct Internal Funtion
    // public function definition
    fun Move() {
        // We use {$number} format
        carName()
        print("We have run about {}KM", distance)
    }

    // private or protected function definition
    fun carName() {
        print("Car name is {0}", name)
    }
}

// Function by reference
fun Car Crash() {
    // We use 'this' keyword to access 'Car' variable or function
    print("The Car {} was crashed after {}KM", this.name, this.distance)

    // Function by reference can access private or protected variable
    this._numCrash++
}
